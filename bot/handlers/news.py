import requests
import json
from flask import jsonify
from datetime import datetime

def handle_news(user_info, chat_id, message_text):
    """Handle /news command - show latest news from API"""
    
    try:
        # API URL
        api_url = "https://myairtel-prod.robi.com.bd/card/api/v1/news"
        
        # Fetch data from API
        response = requests.get(api_url, timeout=10)
        
        if response.status_code != 200:
            return jsonify({
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': "‚ùå <b>‡¶®‡¶ø‡¶â‡¶ú ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ!</b>\n\n‡¶¶‡ßü‡¶æ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
                'parse_mode': 'HTML'
            })
        
        data = response.json()
        
        if data.get('status') != 'success' or 'data' not in data:
            return jsonify({
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': "‚ùå <b>‡¶®‡¶ø‡¶â‡¶ú ‡¶°‡¶æ‡¶ü‡¶æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø!</b>\n\nAPI ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§",
                'parse_mode': 'HTML'
            })
        
        items = data['data'].get('items', [])
        
        if not items:
            return jsonify({
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': "üì∞ <b>‡¶ï‡ßã‡¶® ‡¶®‡¶ø‡¶â‡¶ú ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø!</b>\n\n‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®‡ßá ‡¶ï‡ßã‡¶® ‡¶®‡¶ø‡¶â‡¶ú ‡¶®‡ßá‡¶á‡•§",
                'parse_mode': 'HTML'
            })
        
        # Show first 3 news items
        news_text = "üì∞ <b>‡¶∏‡¶∞‡ßç‡¶¨‡¶∂‡ßá‡¶∑ ‡¶ñ‡¶¨‡¶∞</b>\n\n"
        
        for i, item in enumerate(items[:3]):
            title = item.get('title', 'No Title')
            published_date = item.get('published_date', 'Unknown Date')
            description = item.get('description', 'No description available.')
            
            # Shorten description if too long
            if len(description) > 200:
                description = description[:200] + "..."
            
            news_text += f"üìå <b>‡¶ñ‡¶¨‡¶∞ {i+1}: {title}</b>\n"
            news_text += f"üïê <b>‡¶∏‡¶Æ‡ßü:</b> {published_date}\n"
            news_text += f"üìù <b>‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§:</b> {description}\n"
            
            # Add image if available
            if 'image' in item and item['image'].get('large'):
                news_text += f"üñºÔ∏è <b>‡¶õ‡¶¨‡¶ø:</b> <a href='{item['image']['large']}'>View Image</a>\n"
            
            # Add link if available
            if 'link' in item and item['link'].get('url'):
                news_text += f"üîó <b>‡¶≤‡¶ø‡¶Ç‡¶ï:</b> <a href='{item['link']['url']}'>Read More</a>\n"
            
            news_text += "‚îÄ" * 30 + "\n\n"
        
        news_text += "‚ÑπÔ∏è <b>‡¶∏‡¶∞‡ßç‡¶¨‡¶∂‡ßá‡¶∑ ‡ß©‡¶ü‡¶ø ‡¶ñ‡¶¨‡¶∞ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá</b>"
        
        # Create keyboard for refresh option
        keyboard = {
            'inline_keyboard': [
                [{'text': 'üîÑ ‡¶®‡¶ø‡¶â‡¶ú ‡¶∞‡¶ø‡¶´‡ßç‡¶∞‡ßá‡¶∂ ‡¶ï‡¶∞‡ßÅ‡¶®', 'callback_data': 'news_refresh'}],
                [{'text': 'üì± ‡¶Æ‡ßá‡¶®‡ßÅ‡¶§‡ßá ‡¶´‡¶ø‡¶∞‡ßÅ‡¶®', 'callback_data': 'menu_refresh'}]
            ]
        }
        
        return jsonify({
            'method': 'sendMessage',
            'chat_id': chat_id,
            'text': news_text,
            'parse_mode': 'HTML',
            'reply_markup': keyboard,
            'disable_web_page_preview': False
        })
        
    except requests.exceptions.Timeout:
        return jsonify({
            'method': 'sendMessage',
            'chat_id': chat_id,
            'text': "‚ùå <b>‡¶®‡¶ø‡¶â‡¶ú ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡ßü ‡¶¨‡ßá‡¶∂‡¶ø ‡¶≤‡¶æ‡¶ó‡¶õ‡ßá!</b>\n\n‡¶¶‡ßü‡¶æ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
            'parse_mode': 'HTML'
        })
        
    except requests.exceptions.RequestException as e:
        return jsonify({
            'method': 'sendMessage',
            'chat_id': chat_id,
            'text': f"‚ùå <b>‡¶®‡ßá‡¶ü‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶ï ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ!</b>\n\n<code>‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {str(e)}</code>",
            'parse_mode': 'HTML'
        })
        
    except Exception as e:
        return jsonify({
            'method': 'sendMessage',
            'chat_id': chat_id,
            'text': f"‚ùå <b>‡¶®‡¶ø‡¶â‡¶ú ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ!</b>\n\n<code>‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {str(e)}</code>",
            'parse_mode': 'HTML'
        })

def handle_all_callbacks(callback_data, user_info, chat_id, message_id):
    """Handle news-related callbacks"""
    
    if callback_data == 'news_refresh':
        return refresh_news(chat_id, message_id, user_info)
    
    return None

def refresh_news(chat_id, message_id, user_info):
    """Refresh news by editing the message"""
    
    try:
        # API URL
        api_url = "https://myairtel-prod.robi.com.bd/card/api/v1/news"
        
        # Fetch data from API
        response = requests.get(api_url, timeout=10)
        
        if response.status_code != 200:
            return jsonify({
                'method': 'editMessageText',
                'chat_id': chat_id,
                'message_id': message_id,
                'text': "‚ùå <b>‡¶®‡¶ø‡¶â‡¶ú ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ!</b>\n\n‡¶¶‡ßü‡¶æ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
                'parse_mode': 'HTML'
            })
        
        data = response.json()
        
        if data.get('status') != 'success' or 'data' not in data:
            return jsonify({
                'method': 'editMessageText',
                'chat_id': chat_id,
                'message_id': message_id,
                'text': "‚ùå <b>‡¶®‡¶ø‡¶â‡¶ú ‡¶°‡¶æ‡¶ü‡¶æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø!</b>\n\nAPI ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§",
                'parse_mode': 'HTML'
            })
        
        items = data['data'].get('items', [])
        
        if not items:
            return jsonify({
                'method': 'editMessageText',
                'chat_id': chat_id,
                'message_id': message_id,
                'text': "üì∞ <b>‡¶ï‡ßã‡¶® ‡¶®‡¶ø‡¶â‡¶ú ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø!</b>\n\n‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®‡ßá ‡¶ï‡ßã‡¶® ‡¶®‡¶ø‡¶â‡¶ú ‡¶®‡ßá‡¶á‡•§",
                'parse_mode': 'HTML'
            })
        
        # Show first 3 news items
        news_text = "üì∞ <b>‡¶∏‡¶∞‡ßç‡¶¨‡¶∂‡ßá‡¶∑ ‡¶ñ‡¶¨‡¶∞</b> üîÑ\n\n"
        
        for i, item in enumerate(items[:3]):
            title = item.get('title', 'No Title')
            published_date = item.get('published_date', 'Unknown Date')
            description = item.get('description', 'No description available.')
            
            # Shorten description if too long
            if len(description) > 200:
                description = description[:200] + "..."
            
            news_text += f"üìå <b>‡¶ñ‡¶¨‡¶∞ {i+1}: {title}</b>\n"
            news_text += f"üïê <b>‡¶∏‡¶Æ‡ßü:</b> {published_date}\n"
            news_text += f"üìù <b>‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§:</b> {description}\n"
            
            # Add image if available
            if 'image' in item and item['image'].get('large'):
                news_text += f"üñºÔ∏è <b>‡¶õ‡¶¨‡¶ø:</b> <a href='{item['image']['large']}'>View Image</a>\n"
            
            # Add link if available
            if 'link' in item and item['link'].get('url'):
                news_text += f"üîó <b>‡¶≤‡¶ø‡¶Ç‡¶ï:</b> <a href='{item['link']['url']}'>Read More</a>\n"
            
            news_text += "‚îÄ" * 30 + "\n\n"
        
        news_text += "‚ÑπÔ∏è <b>‡¶∏‡¶∞‡ßç‡¶¨‡¶∂‡ßá‡¶∑ ‡ß©‡¶ü‡¶ø ‡¶ñ‡¶¨‡¶∞ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá</b>\nüîÑ <b>‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá:</b> " + datetime.now().strftime("%H:%M:%S")
        
        # Create keyboard for refresh option
        keyboard = {
            'inline_keyboard': [
                [{'text': 'üîÑ ‡¶®‡¶ø‡¶â‡¶ú ‡¶∞‡¶ø‡¶´‡ßç‡¶∞‡ßá‡¶∂ ‡¶ï‡¶∞‡ßÅ‡¶®', 'callback_data': 'news_refresh'}],
                [{'text': 'üì± ‡¶Æ‡ßá‡¶®‡ßÅ‡¶§‡ßá ‡¶´‡¶ø‡¶∞‡ßÅ‡¶®', 'callback_data': 'menu_refresh'}]
            ]
        }
        
        return jsonify({
            'method': 'editMessageText',
            'chat_id': chat_id,
            'message_id': message_id,
            'text': news_text,
            'parse_mode': 'HTML',
            'reply_markup': keyboard,
            'disable_web_page_preview': False
        })
        
    except Exception as e:
        return jsonify({
            'method': 'editMessageText',
            'chat_id': chat_id,
            'message_id': message_id,
            'text': f"‚ùå <b>‡¶®‡¶ø‡¶â‡¶ú ‡¶∞‡¶ø‡¶´‡ßç‡¶∞‡ßá‡¶∂ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ!</b>\n\n<code>‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {str(e)}</code>",
            'parse_mode': 'HTML'
        })
