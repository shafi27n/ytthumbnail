from flask import Flask, request, jsonify
import os
import logging

# рж▓ржЧрж┐ржВ ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# ржЗржЙржЬрж╛рж░ рж╕рзНржЯрзЗржЯ рж╕рзНржЯрзЛрж░ ржХрж░рж╛рж░ ржЬржирзНржп ржбрж┐ржХрж╢ржирж╛рж░рж┐
user_states = {}

def send_telegram_message(chat_id, text, parse_mode='Markdown', disable_web_page_preview=True, reply_markup=None):
    """
    Telegram-ржП ржорзЗрж╕рзЗржЬ рж╕рзЗржирзНржб ржХрж░рж╛рж░ ржЬржирзНржп рж╕рж╣рж╛ржпрж╝ржХ ржлрж╛ржВрж╢ржи
    """
    return {
        'method': 'sendMessage',
        'chat_id': chat_id,
        'text': text,
        'parse_mode': parse_mode,
        'disable_web_page_preview': disable_web_page_preview,
        'reply_markup': reply_markup
    }

def get_main_menu():
    """
    ржорзЗржЗржи ржорзЗржирзБ ржмрж╛ржЯржи рждрзИрж░рж┐
    """
    return {
        'inline_keyboard': [
            [
                {'text': 'тД╣я╕П ржЖржорж╛рж░ рж╕ржорзНржкрж░рзНржХрзЗ', 'callback_data': 'about'},
                {'text': 'ЁЯУК рж╕рж╛рж░рзНржнрж┐рж╕рзЗрж╕', 'callback_data': 'services'}
            ],
            [
                {'text': 'ЁЯСд ржкрзНрж░рзЛржлрж╛ржЗрж▓', 'callback_data': 'profile'},
                {'text': 'ЁЯЫая╕П рж╕рзЗржЯрж┐ржВрж╕', 'callback_data': 'settings'}
            ],
            [
                {'text': 'ЁЯУЮ ржпрзЛржЧрж╛ржпрзЛржЧ', 'callback_data': 'contact'}
            ]
        ]
    }

def get_services_menu():
    """
    рж╕рж╛рж░рзНржнрж┐рж╕рзЗрж╕ ржорзЗржирзБ ржмрж╛ржЯржи рждрзИрж░рж┐
    """
    return {
        'inline_keyboard': [
            [
                {'text': 'ЁЯУЭ ржирзЛржЯ', 'callback_data': 'notes'},
                {'text': 'ЁЯФД ржХржиржнрж╛рж░рзНржЯрж╛рж░', 'callback_data': 'converter'}
            ],
            [
                {'text': 'ЁЯУК ржХрзНржпрж╛рж▓ржХрзБрж▓рзЗржЯрж░', 'callback_data': 'calculator'},
                {'text': 'ЁЯОп ржЧрзЗржорж╕', 'callback_data': 'games'}
            ],
            [
                {'text': 'ЁЯФЩ ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи', 'callback_data': 'main_menu'}
            ]
        ]
    }

def answer_callback_query(callback_query_id, text, show_alert=False):
    """
    ржХрзНржпрж╛рж▓ржмрзНржпрж╛ржХ ржХрзБржпрж╝рзЗрж░рж┐ ржЙрждрзНрждрж░ ржжрзЗржУржпрж╝рж╛рж░ ржЬржирзНржп рж╕рж╣рж╛ржпрж╝ржХ ржлрж╛ржВрж╢ржи
    """
    return {
        'method': 'answerCallbackQuery',
        'callback_query_id': callback_query_id,
        'text': text,
        'show_alert': show_alert
    }

def edit_message_reply_markup(chat_id, message_id, reply_markup):
    """
    ржорзЗрж╕рзЗржЬрзЗрж░ рж░рж┐ржкрзНрж▓рж╛ржЗ ржорж╛рж░рзНржХржЖржк ржПржбрж┐ржЯ ржХрж░рж╛рж░ ржЬржирзНржп
    """
    return {
        'method': 'editMessageReplyMarkup',
        'chat_id': chat_id,
        'message_id': message_id,
        'reply_markup': reply_markup
    }

def edit_message_text(chat_id, message_id, text, parse_mode='Markdown', reply_markup=None):
    """
    ржорзЗрж╕рзЗржЬ ржЯрзЗржХрзНрж╕ржЯ ржПржбрж┐ржЯ ржХрж░рж╛рж░ ржЬржирзНржп
    """
    response = {
        'method': 'editMessageText',
        'chat_id': chat_id,
        'message_id': message_id,
        'text': text,
        'parse_mode': parse_mode
    }
    if reply_markup:
        response['reply_markup'] = reply_markup
    return response

@app.route('/', methods=['GET', 'POST'])
def handle_request():
    try:
        # URL ржерзЗржХрзЗ ржЯрзЛржХрзЗржи ржирзЗржУрзЯрж╛
        token = request.args.get('token')
        
        if not token:
            return jsonify({
                'error': 'Token required',
                'solution': 'Add ?token=YOUR_BOT_TOKEN to URL'
            }), 400

        # GET request рж╣рзНржпрж╛ржирзНржбрзЗрж▓ - рж╢рзБржзрзБ ржЯрзЛржХрзЗржи ржнрзНржпрж╛рж▓рж┐ржбрзЗрж╢ржи
        if request.method == 'GET':
            return jsonify({
                'status': 'Interactive Bot is running',
                'token_received': True,
                'message': 'Interactive Question-Answer Bot is ready!'
            })

        # POST request рж╣рзНржпрж╛ржирзНржбрзЗрж▓ - ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржЖржкржбрзЗржЯ
        if request.method == 'POST':
            update = request.get_json()
            
            if not update:
                return jsonify({'error': 'Invalid JSON data'}), 400
            
            logger.info(f"Update received: {update}")
            
            # ржХрзНржпрж╛рж▓ржмрзНржпрж╛ржХ ржХрзБржпрж╝рзЗрж░рж┐ рж╣рзНржпрж╛ржирзНржбрзЗрж▓
            if 'callback_query' in update:
                callback_data = update['callback_query']
                chat_id = callback_data['message']['chat']['id']
                message_id = callback_data['message']['message_id']
                callback_query_id = callback_data['id']
                data = callback_data['data']
                
                responses = []
                
                if data == 'main_menu':
                    # ржорзЗржЗржи ржорзЗржирзБ ржжрзЗржЦрж╛ржУ
                    responses.append(
                        edit_message_text(
                            chat_id=chat_id,
                            message_id=message_id,
                            text="ЁЯПа **ржорзЗржЗржи ржорзЗржирзБ**\n\nржирж┐ржЪрзЗрж░ ржЕржкрж╢ржи ржерзЗржХрзЗ ржЖржкржирж╛рж░ ржкржЫржирзНржжрзЗрж░ ржорзЗржирзБ рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзБржи:",
                            reply_markup=get_main_menu()
                        )
                    )
                    responses.append(answer_callback_query(callback_query_id, "ржорзЗржЗржи ржорзЗржирзБ"))
                
                elif data == 'about':
                    responses.append(
                        edit_message_text(
                            chat_id=chat_id,
                            message_id=message_id,
                            text="""тД╣я╕П **ржЖржорж╛рж░ рж╕ржорзНржкрж░рзНржХрзЗ**

ЁЯдЦ **ржЗржирзНржЯрж╛рж░тАНрзНржпрж╛ржХрзНржЯрж┐ржн ржмржЯ**
ржПржЯрж┐ ржПржХржЯрж┐ ржЗржирзНржЯрзЗрж▓рж┐ржЬрзЗржирзНржЯ ржЗржирзНржЯрж╛рж░тАНрзНржпрж╛ржХрзНржЯрж┐ржн ржмржЯ ржпрж╛ ржЖржкржирж╛рж░ ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░ ржжрж┐рждрзЗ ржкрж╛рж░рзЗ ржПржмржВ ржмрж┐ржнрж┐ржирзНржи рж╕рж╛рж░рзНржнрж┐рж╕ ржкрзНрж░ржжрж╛ржи ржХрж░рзЗред

ЁЯМЯ **ржлрж┐ржЪрж╛рж░рж╕:**
тАв ржкрзНрж░рж╢рзНржи-ржЙрждрзНрждрж░ рж╕рж┐рж╕рзНржЯрзЗржо
тАв ржмрж┐ржнрж┐ржирзНржи ржЗржЙржЯрж┐рж▓рж┐ржЯрж┐ ржЯрзБрж▓рж╕
тАв ржЗржЙржЬрж╛рж░-ржлрзНрж░рзЗржирзНржбрж▓рж┐ ржЗржирзНржЯрж╛рж░ржлрзЗрж╕
тАв рж░рж┐ржпрж╝рзЗрж▓-ржЯрж╛ржЗржо ржХржорж┐ржЙржирж┐ржХрзЗрж╢ржи

ЁЯТб **ржмрзНржпржмрж╣рж╛рж░:** рж╕рж░рж╛рж╕рж░рж┐ ржкрзНрж░рж╢рзНржи ржХрж░рзБржи ржЕржержмрж╛ ржорзЗржирзБ ржерзЗржХрзЗ рж╕рж╛рж░рзНржнрж┐рж╕ рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзБржиред""",
                            reply_markup=get_main_menu()
                        )
                    )
                    responses.append(answer_callback_query(callback_query_id, "ржЖржорж╛рж░ рж╕ржорзНржкрж░рзНржХрзЗ рждржерзНржп"))
                
                elif data == 'services':
                    responses.append(
                        edit_message_text(
                            chat_id=chat_id,
                            message_id=message_id,
                            text="""ЁЯУК **рж╕рж╛рж░рзНржнрж┐рж╕рзЗрж╕ ржорзЗржирзБ**

ржирж┐ржЪрзЗрж░ рж╕рж╛рж░рзНржнрж┐рж╕ржЧрзБрж▓рзЛ ржерзЗржХрзЗ ржЖржкржирж╛рж░ ржкржЫржирзНржжрзЗрж░ржЯрж┐ рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзБржи:

тАв ЁЯУЭ **ржирзЛржЯ** - ржирзЛржЯ рж╕ржВрж░ржХрзНрж╖ржг ржУ ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛
тАв ЁЯФД **ржХржиржнрж╛рж░рзНржЯрж╛рж░** - ржмрж┐ржнрж┐ржирзНржи ржЗржЙржирж┐ржЯ ржХржиржнрж╛рж░рзНрж╕ржи
тАв ЁЯУК **ржХрзНржпрж╛рж▓ржХрзБрж▓рзЗржЯрж░** - ржЧрж╛ржгрж┐рждрж┐ржХ ржХрзНржпрж╛рж▓ржХрзБрж▓рзЗрж╢ржи
тАв ЁЯОп **ржЧрзЗржорж╕** - ржоржЬрж╛ржжрж╛рж░ ржЧрзЗржорж╕

рж╕рж╛рж░рзНржнрж┐рж╕ рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рждрзЗ ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи:""",
                            reply_markup=get_services_menu()
                        )
                    )
                    responses.append(answer_callback_query(callback_query_id, "рж╕рж╛рж░рзНржнрж┐рж╕рзЗрж╕ ржорзЗржирзБ"))
                
                elif data == 'profile':
                    # ржЗржЙржЬрж╛рж░ ржкрзНрж░рзЛржлрж╛ржЗрж▓ ржжрзЗржЦрж╛ржУ
                    user_state = user_states.get(chat_id, {})
                    name = user_state.get('name', 'ржЕржЬрж╛ржирж╛')
                    age = user_state.get('age', 'ржЕржЬрж╛ржирж╛')
                    
                    responses.append(
                        edit_message_text(
                            chat_id=chat_id,
                            message_id=message_id,
                            text=f"""ЁЯСд **ржЖржкржирж╛рж░ ржкрзНрж░рзЛржлрж╛ржЗрж▓**

ЁЯУЫ **ржирж╛ржо:** {name}
ЁЯОВ **ржмржпрж╝рж╕:** {age}
ЁЯЖФ **ржЗржЙржЬрж╛рж░ ржЖржЗржбрж┐:** `{chat_id}`
ЁЯУЕ **рж░рзЗржЬрж┐рж╕рзНржЯрзНрж░рзЗрж╢ржи:** {'рж╕ржорзНржкржирзНржи' if user_state else 'ржЕрж╕ржорзНржкрзВрж░рзНржг'}

ЁЯТб **ржкрзНрж░рзЛржлрж╛ржЗрж▓ ржЖржкржбрзЗржЯ ржХрж░рждрзЗ** `/profile` ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред""",
                            reply_markup=get_main_menu()
                        )
                    )
                    responses.append(answer_callback_query(callback_query_id, "ржкрзНрж░рзЛржлрж╛ржЗрж▓ рждржерзНржп"))
                
                elif data == 'settings':
                    responses.append(
                        edit_message_text(
                            chat_id=chat_id,
                            message_id=message_id,
                            text="""ЁЯЫая╕П **рж╕рзЗржЯрж┐ржВрж╕**

тЪЩя╕П **рж╕рзЗржЯрж┐ржВрж╕ ржЕржкрж╢ржи:**
тАв ЁЯФФ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи рж╕рзЗржЯрж┐ржВрж╕
тАв ЁЯМР ржнрж╛рж╖рж╛ рж╕рзЗржЯрж┐ржВрж╕
тАв ЁЯФТ ржкрзНрж░рж╛ржЗржнрзЗрж╕рж┐ рж╕рзЗржЯрж┐ржВрж╕
тАв ЁЯУ▒ ржерж┐ржо рж╕рзЗржЯрж┐ржВрж╕

ЁЯФз **рж╕рзЗржЯрж┐ржВрж╕ ржХржиржлрж┐ржЧрж╛рж░ ржХрж░рждрзЗ** рж╕рж░рж╛рж╕рж░рж┐ ржорзЗрж╕рзЗржЬрзЗрж░ ржорж╛ржзрзНржпржорзЗ ржЖржорж╛ржХрзЗ ржЬрж╛ржирж╛ржиред""",
                            reply_markup=get_main_menu()
                        )
                    )
                    responses.append(answer_callback_query(callback_query_id, "рж╕рзЗржЯрж┐ржВрж╕ ржорзЗржирзБ"))
                
                elif data == 'contact':
                    responses.append(
                        edit_message_text(
                            chat_id=chat_id,
                            message_id=message_id,
                            text="""ЁЯУЮ **ржпрзЛржЧрж╛ржпрзЛржЧ**

ЁЯУз **ржЗржорзЗржЗрж▓:** example@email.com
ЁЯМР **ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯ:** www.example.com
ЁЯУ▒ **ржлрзЛржи:** +8801XXXXXXXXX

ЁЯТм **рж╕рж╛ржкрзЛрж░рзНржЯ:** рж╕рж░рж╛рж╕рж░рж┐ ржорзЗрж╕рзЗржЬрзЗрж░ ржорж╛ржзрзНржпржорзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред

ЁЯУН **ржарж┐ржХрж╛ржирж╛:** 
ржЖржкржирж╛рж░ ржкрзНрж░рждрж┐рж╖рзНржарж╛ржирзЗрж░ ржарж┐ржХрж╛ржирж╛
ржврж╛ржХрж╛, ржмрж╛ржВрж▓рж╛ржжрзЗрж╢""",
                            reply_markup=get_main_menu()
                        )
                    )
                    responses.append(answer_callback_query(callback_query_id, "ржпрзЛржЧрж╛ржпрзЛржЧ рждржерзНржп"))
                
                elif data in ['notes', 'converter', 'calculator', 'games']:
                    service_names = {
                        'notes': 'ЁЯУЭ ржирзЛржЯ ржорзНржпрж╛ржирзЗржЬрж╛рж░',
                        'converter': 'ЁЯФД ржЗржЙржирж┐ржЯ ржХржиржнрж╛рж░рзНржЯрж╛рж░',
                        'calculator': 'ЁЯУК ржХрзНржпрж╛рж▓ржХрзБрж▓рзЗржЯрж░',
                        'games': 'ЁЯОп ржЧрзЗржорж╕'
                    }
                    
                    service_name = service_names.get(data, data)
                    responses.append(
                        edit_message_text(
                            chat_id=chat_id,
                            message_id=message_id,
                            text=f"ЁЯФД **{service_name}**\n\nржПржЗ рж╕рж╛рж░рзНржнрж┐рж╕ржЯрж┐ ржЦрзБржм рж╢рзАржШрзНрж░ржЗ ржЖрж╕ржЫрзЗ! ЁЯЪА\n\nржмрж░рзНрждржорж╛ржирзЗ ржбрзЗржнрзЗрж▓ржкржорзЗржирзНржЯ ржЪрж▓ржЫрзЗред ржЖржкрж╛рждржд ржорзЗржЗржи ржорзЗржирзБ ржерзЗржХрзЗ ржЕржирзНржп рж╕рж╛рж░рзНржнрж┐рж╕ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред",
                            reply_markup=get_services_menu()
                        )
                    )
                    responses.append(answer_callback_query(callback_query_id, f"{service_name} рж╕рж╛рж░рзНржнрж┐рж╕"))
                
                # ржПржХрж╛ржзрж┐ржХ рж░рзЗрж╕ржкржирзНрж╕ ржерж╛ржХрж▓рзЗ array рж░рж┐ржЯрж╛рж░рзНржи ржжрж╛ржУ, ржирж╛рж╣рж▓рзЗ single object
                if len(responses) > 1:
                    return jsonify(responses)
                else:
                    return jsonify(responses[0])
            
            # ржорзЗрж╕рзЗржЬ ржбрзЗржЯрж╛ ржПржХрзНрж╕ржЯрзНрж░рзНржпрж╛ржХрзНржЯ
            chat_id = None
            message_text = ''
            
            if 'message' in update and 'text' in update['message']:
                chat_id = update['message']['chat']['id']
                message_text = update['message']['text']
            elif 'channel_post' in update and 'text' in update['channel_post']:
                chat_id = update['channel_post']['chat']['id']
                message_text = update['channel_post']['text']
            else:
                return jsonify({'ok': True})  # Ignore non-text messages

            if not chat_id:
                return jsonify({'error': 'Chat ID not found'}), 400

            # ржЗржЙржЬрж╛рж░ рж╕рзНржЯрзЗржЯ ржЪрзЗржХ
            user_state = user_states.get(chat_id, {})
            current_step = user_state.get('step', None)

            # /start ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрзЗрж▓
            if message_text.startswith('/start'):
                welcome_text = """
ЁЯдЦ **рж╕рзНржмрж╛ржЧрждржо ржЗржирзНржЯрж╛рж░тАНрзНржпрж╛ржХрзНржЯрж┐ржн ржмржЯ ржП!** ЁЯдЦ

ржЖржорж┐ ржПржХржЯрж┐ ржЗржирзНржЯрзЗрж▓рж┐ржЬрзЗржирзНржЯ ржмржЯ ржпрзЗ ржЖржкржирж╛рж░ ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░ ржжрж┐рждрзЗ ржПржмржВ ржмрж┐ржнрж┐ржирзНржи рж╕рж╛рж░рзНржнрж┐рж╕ ржкрзНрж░ржжрж╛ржи ржХрж░рждрзЗ ржкрж╛рж░рж┐ред

ЁЯОп **ржЖржорж╛я┐╜я┐╜ ржпрж╛ ржХрж░рждрзЗ ржкрж╛рж░рж┐:**
тАв ржЖржкржирж╛рж░ ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░ ржжрж┐рждрзЗ
тАв ржмрж┐ржнрж┐ржирзНржи ржЗржЙржЯрж┐рж▓рж┐ржЯрж┐ рж╕рж╛рж░рзНржнрж┐рж╕ ржкрзНрж░ржжрж╛ржи ржХрж░рждрзЗ
тАв ржЖржкржирж╛рж░ рждржерзНржп рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рждрзЗ
тАв ржЗржирзНржЯрж╛рж░тАНрзНржпрж╛ржХрзНржЯрж┐ржн ржХржорж┐ржЙржирж┐ржХрзЗрж╢ржи ржХрж░рждрзЗ

ЁЯУЛ **ржмрзНржпржмрж╣рж╛рж░ ржмрж┐ржзрж┐:**
1. рж╕рж░рж╛рж╕рж░рж┐ ржкрзНрж░рж╢рзНржи ржХрж░рзБржи
2. ржорзЗржирзБ ржерзЗржХрзЗ рж╕рж╛рж░рзНржнрж┐рж╕ рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзБржи  
3. ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ ржирж┐рж░рзНржжрзЗрж╢ржирж╛ ржЕржирзБрж╕рж░ржг ржХрж░рзБржи

ЁЯСЗ **рж╢рзБрж░рзБ ржХрж░рждрзЗ ржирж┐ржЪрзЗрж░ ржорзЗржирзБ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи:**
                """
                
                # ржЗржЙржЬрж╛рж░ рж╕рзНржЯрзЗржЯ рж░рж┐рж╕рзЗржЯ
                user_states[chat_id] = {'step': None}
                
                return jsonify(send_telegram_message(
                    chat_id=chat_id,
                    text=welcome_text,
                    reply_markup=get_main_menu()
                ))

            # /help ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрзЗрж▓
            elif message_text.startswith('/help'):
                help_text = """
ЁЯЖШ **рж╕рж╛рж╣рж╛ржпрзНржп:** ЁЯЖШ

ЁЯУЦ **ржХржорж╛ржирзНржб рж▓рж┐рж╕рзНржЯ:**
тАв `/start` - ржмржЯ рж╢рзБрж░рзБ ржХрж░рзБржи
тАв `/help` - рж╕рж╛рж╣рж╛ржпрзНржп ржжрзЗржЦрзБржи  
тАв `/profile` - ржкрзНрж░рзЛржлрж╛ржЗрж▓ рж╕рзЗржЯржЖржк
тАв `/menu` - ржорзЗржЗржи ржорзЗржирзБ ржжрзЗржЦрзБржи

ЁЯТб **ржХрж┐ржнрж╛ржмрзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЗржи:**
1. рж╕рж░рж╛рж╕рж░рж┐ ржпрзЗржХрзЛржирзЛ ржкрзНрж░рж╢рзНржи ржХрж░рзБржи
2. ржорзЗржирзБ ржерзЗржХрзЗ рж╕рж╛рж░рзНржнрж┐рж╕ рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзБржи
3. ржмржЯрзЗрж░ ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░ ржжрж┐ржи ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ

ЁЯОп **ржЙржжрж╛рж╣рж░ржг:**
тАв "ржЖржкржирж╛рж░ ржирж╛ржо ржХрж┐?"
тАв "ржЖржЬржХрзЗрж░ рждрж╛рж░рж┐ржЦ ржХрж┐?"
тАв "ржХрзНржпрж╛рж▓ржХрзБрж▓рзЗржЯрж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржЪрж╛ржЗ"

ЁЯЫая╕П **рж╕рж╛ржкрзЛрж░рзНржЯ:** рж╕ржорж╕рзНржпрж╛ рж╣рж▓рзЗ /start ржХржорж╛ржирзНржб ржжрж┐ржпрж╝рзЗ ржЖржмрж╛рж░ рж╢рзБрж░рзБ ржХрж░рзБржиред
                """
                
                return jsonify(send_telegram_message(
                    chat_id=chat_id,
                    text=help_text,
                    reply_markup=get_main_menu()
                ))

            # /profile ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрзЗрж▓
            elif message_text.startswith('/profile'):
                user_states[chat_id] = {'step': 'asking_name'}
                return jsonify(send_telegram_message(
                    chat_id=chat_id,
                    text="ЁЯСд **ржкрзНрж░рзЛржлрж╛ржЗрж▓ рж╕рзЗржЯржЖржк**\n\nржЖржкржирж╛рж░ ржирж╛ржо ржХрж┐? ЁЯУЫ\n\n(ржкрзНрж░рждрж┐ржЯрж┐ ржзрж╛ржкрзЗ рж╢рзБржзрзБ ржЙрждрзНрждрж░ржЯрж┐ рж▓рж┐ржЦрзБржи)"
                ))

            # /menu ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрзЗрж▓
            elif message_text.startswith('/menu'):
                return jsonify(send_telegram_message(
                    chat_id=chat_id,
                    text="ЁЯПа **ржорзЗржЗржи ржорзЗржирзБ**\n\nржирж┐ржЪрзЗрж░ ржЕржкрж╢ржи ржерзЗржХрзЗ ржЖржкржирж╛рж░ ржкржЫржирзНржжрзЗрж░ ржорзЗржирзБ рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзБржи:",
                    reply_markup=get_main_menu()
                ))

            # ржЗржЙржЬрж╛рж░ рж╕рзНржЯрзЗржЯ ржЕржирзБржпрж╛ржпрж╝рзА ржкрзНрж░рж╕рзЗрж╕
            elif current_step == 'asking_name':
                user_states[chat_id] = {
                    'step': 'asking_age',
                    'name': message_text
                }
                return jsonify(send_telegram_message(
                    chat_id=chat_id,
                    text=f"ржзржирзНржпржмрж╛ржж {message_text}! ЁЯОЙ\n\nржПржЦржи ржЖржкржирж╛рж░ ржмржпрж╝рж╕ ржХрж┐? ЁЯОВ"
                ))

            elif current_step == 'asking_age':
                user_states[chat_id] = {
                    'step': None,
                    'name': user_state.get('name', 'ржЕржЬрж╛ржирж╛'),
                    'age': message_text
                }
                return jsonify(send_telegram_message(
                    chat_id=chat_id,
                    text=f"""тЬЕ **ржкрзНрж░рзЛржлрж╛ржЗрж▓ рж╕ржорзНржкрзВрж░рзНржг!** тЬЕ

ЁЯСд **ржкрзНрж░рзЛржлрж╛ржЗрж▓ рждржерзНржп:**
ЁЯУЫ **ржирж╛ржо:** {user_state.get('name', 'ржЕржЬрж╛ржирж╛')}
ЁЯОВ **ржмржпрж╝рж╕:** {message_text}

ржЖржкржирж╛рж░ ржкрзНрж░рзЛржлрж╛ржЗрж▓ рж╕ржлрж▓ржнрж╛ржмрзЗ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ! ЁЯОЙ
ржкрзНрж░рзЛржлрж╛ржЗрж▓ ржжрзЗржЦрждрзЗ ржорзЗржирзБ ржерзЗржХрзЗ 'ЁЯСд ржкрзНрж░рзЛржлрж╛ржЗрж▓' рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзБржиред""",
                    reply_markup=get_main_menu()
                ))

            # рж╕рж╛ржзрж╛рж░ржг ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░
            else:
                # рж╕рж╛ржзрж╛рж░ржг ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░ ржжрзЗржУржпрж╝рж╛
                responses = []
                
                # ржХрж┐ржЫрзБ ржХржоржи ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░
                question = message_text.lower()
                
                if any(word in question for word in ['ржирж╛ржо', 'name', 'ржХрзЗ']):
                    responses.append(send_telegram_message(
                        chat_id=chat_id,
                        text="ЁЯдЦ **ржЖржорж╛рж░ ржирж╛ржо ржЗржирзНржЯрж╛рж░тАНрзНржпрж╛ржХрзНржЯрж┐ржн ржмржЯ!**\n\nржЖржорж┐ ржЖржкржирж╛рж░ ржмрзНржпржХрзНрждрж┐ржЧржд рж╕рж╣рж╛ржпрж╝ржХ ржмржЯред ржЖржкржирж┐ ржХрзАржнрж╛ржмрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржЪрж╛ржи?",
                        reply_markup=get_main_menu()
                    ))
                
                elif any(word in question for word in ['рж╣рзЗрж▓рзЛ', 'hello', 'рж╣рж╛ржЗ', 'hi']):
                    responses.append(send_telegram_message(
                        chat_id=chat_id,
                        text="ЁЯСЛ **рж╣рзНржпрж╛рж▓рзЛ!**\n\nржЖржорж╛ржХрзЗ ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзБржи, ржЖржорж┐ ржХрзАржнрж╛ржмрзЗ ржЖржкржирж╛ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐? ЁЯШК",
                        reply_markup=get_main_menu()
                    ))
                
                elif any(word in question for word in ['ржзржирзНржпржмрж╛ржж', 'thank', 'thanks']):
                    responses.append(send_telegram_message(
                        chat_id=chat_id,
                        text="ЁЯШК **ржЖржкржирж╛ржХрзЗржУ ржзржирзНржпржмрж╛ржж!**\n\nржЖрж░ ржХрзЛржирзЛ рж╕рж╛рж╣рж╛ржпрзНржпрзЗрж░ ржкрзНрж░ржпрж╝рзЛржЬржи рж╣рж▓рзЗ ржЬрж╛ржирж╛ржмрзЗржиред",
                        reply_markup=get_main_menu()
                    ))
                
                elif any(word in question for word in ['рж╕ржоржпрж╝', 'time', 'рждрж╛рж░рж┐ржЦ', 'date']):
                    from datetime import datetime
                    now = datetime.now()
                    current_time = now.strftime("%Y-%m-%d %H:%M:%S")
                    responses.append(send_telegram_message(
                        chat_id=chat_id,
                        text=f"ЁЯХТ **ржмрж░рзНрждржорж╛ржи рж╕ржоржпрж╝ ржУ рждрж╛рж░рж┐ржЦ:**\n\n`{current_time}`\n\nржмрж╛ржВрж▓рж╛ржжрзЗрж╢ рж╕ржоржпрж╝ ржЕржирзБржпрж╛ржпрж╝рзА",
                        reply_markup=get_main_menu()
                    ))
                
                else:
                    # ржбрж┐ржлрж▓рзНржЯ рж░рзЗрж╕ржкржирзНрж╕
                    responses.append(send_telegram_message(
                        chat_id=chat_id,
                        text=f"""тЭУ **ржЖржкржирж╛рж░ ржкрзНрж░рж╢рзНржи:** "{message_text}"

ржЖржорж┐ ржПржЗ ржкрзНрж░рж╢рзНржирзЗрж░ рж╕рж░рж╛рж╕рж░рж┐ ржЙрждрзНрждрж░ ржжрж┐рждрзЗ ржкрж╛рж░ржЫрж┐ ржирж╛ред рждржмрзЗ ржЖржкржирж┐ ржпрж╛ ржХрж░рждрзЗ ржкрж╛рж░рзЗржи:

1. ЁЯПа **ржорзЗржирзБ ржерзЗржХрзЗ рж╕рж╛рж░рзНржнрж┐рж╕ рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзБржи**
2. ЁЯУЛ **рж╕рзНржкрзЗрж╕рж┐ржлрж┐ржХ ржкрзНрж░рж╢рзНржи ржХрж░рзБржи**
3. ЁЯЫая╕П **рж╕рж╛рж╣рж╛ржпрзНржпрзЗрж░ ржЬржирзНржп** `/help` ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи

ржЕржержмрж╛ рж╕рж░рж╛рж╕рж░рж┐ ржЖржорж╛ржХрзЗ ржмрж▓рзБржи ржЖржкржирж┐ ржХрзА ржХрж░рждрзЗ ржЪрж╛ржи? ЁЯШК""",
                        reply_markup=get_main_menu()
                    ))
                
                return jsonify(responses[0])

    except Exception as e:
        logger.error(f'Global error: {e}')
        return jsonify({
            'error': 'Processing failed',
            'details': str(e)
        }), 500

# ржЕржирзНржп ржХрзЛржи ржПржирзНржбржкржпрж╝рзЗржирзНржЯрзЗ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ ржЖрж╕рж▓рзЗ рж╢рзБржзрзБ token ржЪрзЗржХ ржХрж░ржмрзЗ
@app.route('/<path:path>', methods=['GET', 'POST'])
def catch_all(path):
    token = request.args.get('token')
    if not token:
        return jsonify({'error': 'Token required'}), 400
    
    if request.method == 'GET':
        return jsonify({
            'status': 'Interactive Bot is running',
            'token_received': True,
            'endpoint': path
        })
    
    # POST request ржПрж░ ржЬржирзНржп ржорзВрж▓ рж▓ржЬрж┐ржХрзЗ redirect
    return handle_request()

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port, debug=False)
