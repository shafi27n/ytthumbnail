import os
import requests
import telebot
from pytube import YouTube
from urllib.parse import urlparse, parse_qs
from flask import Flask, request, jsonify
import logging

# ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶ü‡ßã‡¶ï‡ßá‡¶®
DEFAULT_TOKEN = "7628222622:AAEomk7Od-jcKnQMdkmOpejvYYF47BjMAMQ"

# ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def get_bot_token():
    # URL parameter ‡¶•‡ßá‡¶ï‡ßá ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶®‡¶ø‡¶®
    token_from_url = request.args.get('token') if request else None
    if token_from_url:
        logger.info("‚úÖ Token loaded from URL parameter")
        return token_from_url
    
    # ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
    logger.info("‚úÖ Using default token")
    return DEFAULT_TOKEN

# ‡¶¨‡¶ü ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶®
def initialize_bot(token):
    try:
        bot = telebot.TeleBot(token)
        logger.info("‚úÖ Bot initialized successfully")
        return bot
    except Exception as e:
        logger.error(f"‚ùå Bot initialization failed: {e}")
        return None

# ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶Ü‡¶á‡¶°‡¶ø ‡¶è‡¶ï‡ßç‡¶∏‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def extract_video_id(url):
    parsed_url = urlparse(url)
    if parsed_url.hostname == 'youtu.be':
        return parsed_url.path[1:]
    if parsed_url.hostname in ('www.youtube.com', 'youtube.com'):
        if parsed_url.path == '/watch':
            return parse_qs(parsed_url.query)['v'][0]
        if parsed_url.path[:7] == '/embed/':
            return parsed_url.path.split('/')[2]
        if parsed_url.path[:3] == '/v/':
            return parsed_url.path.split('/')[2]
    return None

# ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def download_thumbnail(video_id):
    try:
        # ‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶∞‡ßá‡¶ú‡ßã‡¶≤‡¶ø‡¶â‡¶∂‡¶®‡ßá‡¶∞ ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ URL
        thumbnails = {
            'maxres': f'https://img.youtube.com/vi/{video_id}/maxresdefault.jpg',
            'sd': f'https://img.youtube.com/vi/{video_id}/sddefault.jpg',
            'hq': f'https://img.youtube.com/vi/{video_id}/hqdefault.jpg',
            'mq': f'https://img.youtube.com/vi/{video_id}/mqdefault.jpg',
            'default': f'https://img.youtube.com/vi/{video_id}/default.jpg'
        }
        
        # ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø‡¶∞ ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
        for quality, url in thumbnails.items():
            response = requests.get(url, timeout=10)
            if response.status_code == 200 and len(response.content) > 1000:
                filename = f"{video_id}_{quality}.jpg"
                with open(filename, 'wb') as f:
                    f.write(response.content)
                return filename
        return None
    except Exception as e:
        logger.error(f"Error downloading thumbnail: {e}")
        return None

# ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def process_message(bot, message):
    chat_id = message.chat.id
    text = message.text.strip()
    
    if text.startswith('/start'):
        welcome_text = """
üéâ **‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°‡¶æ‡¶∞ ‡¶¨‡¶ü‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ!** üéâ

‡¶è‡¶ï‡¶ü‡¶ø ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶æ‡¶†‡¶æ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶Æ‡¶ø ‡¶§‡¶æ‡¶∞ ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá ‡¶¶‡¶ø‡¶¨‡•§

üìå **‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ:**
1. ‡¶è‡¶ï‡¶ü‡¶ø ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
2. ‡¶≤‡¶ø‡¶Ç‡¶ï‡¶ü‡¶ø ‡¶è‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®
3. ‡¶Ü‡¶Æ‡¶ø ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶¨

‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: `https://www.youtube.com/watch?v=dQw4w9WgXcQ`
        """
        bot.send_message(chat_id, welcome_text)
        return

    elif text.startswith('/help'):
        help_text = """
ü§ñ **‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°‡¶æ‡¶∞ ‡¶¨‡¶ü - ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø**

üìã **‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶∏‡¶Æ‡ßÇ‡¶π:**
/start - ‡¶¨‡¶ü ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®
/help - ‡¶è‡¶á ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®
/status - ‡¶¨‡¶ü ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®

üîó **‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü:**
- https://www.youtube.com/watch?v=VIDEO_ID
- https://youtu.be/VIDEO_ID
- https://www.youtube.com/embed/VIDEO_ID
        """
        bot.send_message(chat_id, help_text)
        return

    elif text.startswith('/status'):
        status_text = """
ü§ñ **‡¶¨‡¶ü ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏**
‚úÖ ‡¶¨‡¶ü ‡¶è‡¶ï‡ßç‡¶ü‡¶ø‡¶≠ ‡¶è‡¶¨‡¶Ç ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶õ‡ßá
üñºÔ∏è ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§
üåê Webhook ‡¶Æ‡ßã‡¶° - ‡¶Ö‡¶®-‡¶°‡¶ø‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá
        """
        bot.send_message(chat_id, status_text)
        return

    # ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ
    elif 'youtube.com' in text or 'youtu.be' in text:
        bot.send_message(chat_id, "üîç ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
        
        video_id = extract_video_id(text)
        
        if video_id:
            try:
                yt = YouTube(text)
                video_title = yt.title
                
                bot.send_message(chat_id, f"üìπ **‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ü‡¶æ‡¶á‡¶ü‡ßá‡¶≤:** {video_title}\n\n‚¨áÔ∏è ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
                
                thumbnail_file = download_thumbnail(video_id)
                
                if thumbnail_file:
                    with open(thumbnail_file, 'rb') as photo:
                        bot.send_photo(chat_id, photo, 
                                     caption=f"üñºÔ∏è **‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£!**\n\nüìπ **‡¶≠‡¶ø‡¶°‡¶ø‡¶ì:** {video_title}\nüîó **‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶Ü‡¶á‡¶°‡¶ø:** `{video_id}`")
                    
                    os.remove(thumbnail_file)
                    logger.info(f"‚úÖ Thumbnail sent for video: {video_id}")
                else:
                    bot.send_message(chat_id, "‚ùå ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶ü‡¶ø ‡¶™‡¶æ‡¶¨‡¶≤‡¶ø‡¶ï ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
                    
            except Exception as e:
                error_msg = f"‚ùå ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {str(e)}"
                bot.send_message(chat_id, error_msg)
                logger.error(f"Video error: {e}")
        else:
            bot.send_message(chat_id, "‚ùå ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶° ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
    else:
        bot.send_message(chat_id, "‚ùå ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶° ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§")

# Flask Routes
@app.route('/')
def home():
    return jsonify({
        "status": "active", 
        "bot": "YouTube Thumbnail Downloader",
        "mode": "webhook",
        "description": "Bot works on-demand via webhook, not always connected",
        "endpoints": {
            "webhook": "/webhook (POST)",
            "health": "/health",
            "set_webhook": "/set-webhook?url=YOUR_URL"
        },
        "usage": "Send Telegram messages to this bot, they will be processed via webhook"
    })

@app.route('/health')
def health():
    return jsonify({"status": "healthy", "mode": "webhook"})

@app.route('/set-webhook', methods=['GET', 'POST'])
def set_webhook():
    token = get_bot_token()
    bot = initialize_bot(token)
    
    if not bot:
        return jsonify({"status": "error", "message": "Failed to initialize bot"}), 500
    
    # Webhook URL - ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® URL ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
    webhook_url = request.args.get('url') or request.url_root + 'webhook'
    
    try:
        # Telegram ‡¶è webhook ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
        result = bot.set_webhook(url=webhook_url)
        logger.info(f"Webhook set to: {webhook_url}")
        
        return jsonify({
            "status": "success", 
            "message": "Webhook set successfully",
            "webhook_url": webhook_url,
            "result": result
        })
    except Exception as e:
        logger.error(f"Webhook setting error: {e}")
        return jsonify({
            "status": "error", 
            "message": f"Failed to set webhook: {str(e)}"
        }), 500

@app.route('/remove-webhook', methods=['GET', 'POST'])
def remove_webhook():
    token = get_bot_token()
    bot = initialize_bot(token)
    
    if not bot:
        return jsonify({"status": "error", "message": "Failed to initialize bot"}), 500
    
    try:
        # Webhook ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡ßÅ‡¶®
        result = bot.remove_webhook()
        logger.info("Webhook removed successfully")
        
        return jsonify({
            "status": "success", 
            "message": "Webhook removed successfully",
            "result": result
        })
    except Exception as e:
        logger.error(f"Webhook removal error: {e}")
        return jsonify({
            "status": "error", 
            "message": f"Failed to remove webhook: {str(e)}"
        }), 500

@app.route('/webhook', methods=['POST'])
def webhook():
    """
    Telegram webhook endpoint - ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∏‡¶¨ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ü‡¶∏‡¶¨‡ßá
    """
    if request.method == 'POST':
        try:
            # JSON ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶æ‡¶®
            json_data = request.get_json()
            logger.info(f"üì® Received webhook data: {json_data}")
            
            if not json_data:
                return 'No data received', 400
            
            # ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
            token = get_bot_token()
            bot = initialize_bot(token)
            
            if not bot:
                return 'Bot initialization failed', 500
            
            # Telegram update object ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
            update = telebot.types.Update.de_json(json_data)
            
            # ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡ßÅ‡¶®
            if update.message:
                process_message(bot, update.message)
            
            return 'OK', 200
            
        except Exception as e:
            logger.error(f"Webhook processing error: {e}")
            return 'ERROR', 500

@app.route('/test', methods=['GET', 'POST'])
def test_bot():
    """
    ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶è‡¶®‡ßç‡¶°‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü - ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßÅ‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
    """
    token = get_bot_token()
    bot = initialize_bot(token)
    
    if not bot:
        return jsonify({"status": "error", "message": "Bot initialization failed"})
    
    # ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶∏‡¶ø‡¶Æ‡ßÅ‡¶≤‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
    class TestMessage:
        def __init__(self, text):
            self.chat = type('Chat', (), {'id': 123456})()  # ‡¶°‡¶æ‡¶Æ‡¶ø chat ID
            self.text = text
    
    test_message = TestMessage("/start")
    process_message(bot, test_message)
    
    return jsonify({
        "status": "success", 
        "message": "Test message processed",
        "test_message": "/start"
    })

# ‡¶Æ‡ßá‡¶á‡¶® ‡¶è‡¶®‡ßç‡¶ü‡ßç‡¶∞‡¶ø ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü
if __name__ == "__main__":
    port = int(os.environ.get('PORT', 5000))
    logger.info(f"üöÄ Starting YouTube Thumbnail Bot on port {port}")
    logger.info("üåê Webhook Mode - Bot will work on-demand only")
    
    # Flask app ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®
    app.run(host='0.0.0.0', port=port, debug=False)
