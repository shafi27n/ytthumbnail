from flask import Flask, request, jsonify
import requests
import re
import os
import logging
from urllib.parse import urlparse

# ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶®
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

def extract_youtube_thumbnail(video_url):
    """
    YouTube ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì URL ‡¶•‡ßá‡¶ï‡ßá ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá
    """
    try:
        # ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ID ‡¶è‡¶ï‡ßç‡¶∏‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü
        video_id = None
        
        # ‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶® YouTube URL ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡¶æ
        patterns = [
            r'(?:youtube\.com/watch\?v=|youtu\.be/|youtube\.com/embed/)([a-zA-Z0-9_-]{11})',
            r'youtube\.com/watch\?.*v=([a-zA-Z0-9_-]{11})',
        ]
        
        for pattern in patterns:
            match = re.search(pattern, video_url)
            if match:
                video_id = match.group(1)
                break
        
        if not video_id:
            return None, "‡¶≠‡¶æ‡¶≤‡¶ø‡¶° YouTube ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
        
        # ‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø‡¶∞ ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ URLs
        thumbnails = {
            'default': f'https://img.youtube.com/vi/{video_id}/default.jpg',
            'medium': f'https://img.youtube.com/vi/{video_id}/mqdefault.jpg',
            'high': f'https://img.youtube.com/vi/{video_id}/hqdefault.jpg',
            'standard': f'https://img.youtube.com/vi/{video_id}/sddefault.jpg',
            'maxres': f'https://img.youtube.com/vi/{video_id}/maxresdefault.jpg'
        }
        
        return thumbnails, None
        
    except Exception as e:
        logger.error(f"Thumbnail extraction error: {e}")
        return None, f"‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {str(e)}"

def is_youtube_url(text):
    """‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶ñ‡ßá ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü YouTube URL ‡¶ï‡¶ø‡¶®‡¶æ"""
    youtube_patterns = [
        r'^(https?://)?(www\.)?(youtube\.com/watch\?v=|youtu\.be/|youtube\.com/embed/)[a-zA-Z0-9_-]{11}',
        r'youtube\.com/watch\?.*v=[a-zA-Z0-9_-]{11}',
    ]
    
    for pattern in youtube_patterns:
        if re.search(pattern, text):
            return True
    return False

def download_image(image_url):
    """
    ‡¶á‡¶Æ‡ßá‡¶ú URL ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá
    """
    try:
        response = requests.get(image_url, timeout=10)
        response.raise_for_status()
        return response.content, None
    except Exception as e:
        logger.error(f"Image download error: {e}")
        return None, f"‡¶á‡¶Æ‡ßá‡¶ú ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}"

@app.route('/', methods=['GET', 'POST'])
def handle_request():
    try:
        # URL ‡¶•‡ßá‡¶ï‡ßá ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶®‡ßá‡¶ì‡ßü‡¶æ
        token = request.args.get('token')
        
        if not token:
            return jsonify({
                'error': 'Token required',
                'solution': 'Add ?token=YOUR_BOT_TOKEN to URL'
            }), 400

        # GET request ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ - ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶°‡ßá‡¶∂‡¶®
        if request.method == 'GET':
            return jsonify({
                'status': 'Bot is running',
                'token_received': True,
                'message': 'YouTube Thumbnail Downloader Bot is ready!'
            })

        # POST request ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ - ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü
        if request.method == 'POST':
            update = request.get_json()
            
            if not update:
                return jsonify({'error': 'Invalid JSON data'}), 400
            
            logger.info(f"Update received: {update}")
            
            # ‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡ßÅ‡¶Ø‡¶º‡ßá‡¶∞‡¶ø ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤
            if 'callback_query' in update:
                callback_data = update['callback_query']
                chat_id = callback_data['message']['chat']['id']
                message_id = callback_data['message']['message_id']
                data = callback_data['data']
                
                # ‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶æ‡¶∞‡ßç‡¶∏ ‡¶ï‡¶∞‡¶æ (format: quality|video_id)
                if '|' in data:
                    quality, video_id = data.split('|', 1)
                    
                    # ‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø‡¶∞ ‡¶®‡¶æ‡¶Æ
                    quality_names = {
                        'default': '‡¶õ‡ßã‡¶ü',
                        'medium': '‡¶Æ‡¶ß‡ßç‡¶Ø‡¶Æ', 
                        'high': '‡¶¨‡¶°‡¶º',
                        'standard': '‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶æ‡¶∞‡ßç‡¶°',
                        'maxres': '‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö'
                    }
                    
                    quality_name = quality_names.get(quality, quality)
                    thumbnail_url = f'https://img.youtube.com/vi/{video_id}/{quality}.jpg'
                    
                    # ‡¶á‡¶Æ‡ßá‡¶ú ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ
                    image_data, error = download_image(thumbnail_url)
                    
                    if error:
                        return jsonify({
                            'method': 'answerCallbackQuery',
                            'callback_query_id': callback_data['id'],
                            'text': f'‚ùå {error}',
                            'show_alert': True
                        })
                    
                    # ‡¶á‡¶Æ‡ßá‡¶ú ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ
                    return jsonify({
                        'method': 'sendPhoto',
                        'chat_id': chat_id,
                        'photo': image_data,
                        'caption': f'üñºÔ∏è **{quality_name} ‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤**\n\n‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø: {quality_name}\n‡¶∞‡ßá‡¶ú‡ßã‡¶≤‡¶ø‡¶â‡¶∂‡¶®: {quality}',
                        'parse_mode': 'Markdown',
                        'reply_to_message_id': message_id
                    })
                
                return jsonify({'ok': True})
            
            # ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶°‡ßá‡¶ü‡¶æ ‡¶è‡¶ï‡ßç‡¶∏‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü
            chat_id = None
            message_text = ''
            
            if 'message' in update and 'text' in update['message']:
                chat_id = update['message']['chat']['id']
                message_text = update['message']['text']
            elif 'channel_post' in update and 'text' in update['channel_post']:
                chat_id = update['channel_post']['chat']['id']
                message_text = update['channel_post']['text']
            else:
                return jsonify({'ok': True})  # Ignore non-text messages

            if not chat_id:
                return jsonify({'error': 'Chat ID not found'}), 400

            # /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤
            if message_text.startswith('/start'):
                welcome_text = """
üé¨ **‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ YouTube Thumbnail Downloader Bot ‡¶è!** üé¨

üì• **‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶¨‡¶ø‡¶ß‡¶ø:**
1. ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã YouTube ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶∏‡ßá‡¶®‡ßç‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
2. ‡¶¨‡¶ü ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶¨‡¶ó‡ßÅ‡¶≤‡ßã ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶Ö‡¶™‡¶∂‡¶® ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
3. ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶õ‡¶®‡ßç‡¶¶‡¶Æ‡¶§ ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®

üîó **‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü‡ßá‡¶° ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü:**
‚Ä¢ `https://youtube.com/watch?v=VIDEO_ID`
‚Ä¢ `https://youtu.be/VIDEO_ID`  
‚Ä¢ `https://www.youtube.com/embed/VIDEO_ID`

üìã **‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:**
`https://youtu.be/dQw4w9WgXcQ`
`https://www.youtube.com/watch?v=dQw4w9WgXcQ`

üëâ **‡¶è‡¶ñ‡¶®‡¶á ‡¶è‡¶ï‡¶ü‡¶ø YouTube ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶∏‡ßá‡¶®‡ßç‡¶° ‡¶ï‡¶∞‡ßá ‡¶ü‡ßç‡¶∞‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®!**
                """
                
                return jsonify({
                    'method': 'sendMessage',
                    'chat_id': chat_id,
                    'text': welcome_text,
                    'parse_mode': 'Markdown',
                    'disable_web_page_preview': True
                })

            # /help ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤
            elif message_text.startswith('/help'):
                help_text = """
üÜò **‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø:** üÜò

‡¶è‡¶á ‡¶¨‡¶ü YouTube ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶•‡ßá‡¶ï‡ßá ‡¶π‡¶æ‡¶á-‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡ßá‡•§

üìñ **‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá‡¶®:**
1. YouTube ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
2. ‡¶¨‡¶ü‡ßá ‡¶™‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
3. ‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø‡¶∞ ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®
4. ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶õ‡¶®‡ßç‡¶¶‡ßá‡¶∞ ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®

üéØ **‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø ‡¶Ö‡¶™‡¶∂‡¶®:**
‚Ä¢ üü¢ ‡¶õ‡ßã‡¶ü (120√ó90)
‚Ä¢ üü° ‡¶Æ‡¶ß‡ßç‡¶Ø‡¶Æ (320√ó180) 
‚Ä¢ üü† ‡¶¨‡¶°‡¶º (480√ó360)
‚Ä¢ üîµ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶æ‡¶∞‡ßç‡¶° (640√ó480)
‚Ä¢ üî¥ ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö (1280√ó720)

‚ö†Ô∏è **‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶≤‡ßá:**
‚Ä¢ ‡¶≤‡¶ø‡¶Ç‡¶ï‡¶ü‡¶ø ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
‚Ä¢ ‡¶®‡ßá‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡¶∂‡¶® ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
‚Ä¢ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®

üõ†Ô∏è **‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü:** ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶≤‡ßá /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
                """
                
                return jsonify({
                    'method': 'sendMessage',
                    'chat_id': chat_id,
                    'text': help_text,
                    'parse_mode': 'Markdown'
                })

            # YouTube ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶ö‡ßá‡¶ï
            elif is_youtube_url(message_text):
                # ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶è‡¶ï‡ßç‡¶∏‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü
                thumbnails, error = extract_youtube_thumbnail(message_text)
                
                if error:
                    return jsonify({
                        'method': 'sendMessage',
                        'chat_id': chat_id,
                        'text': f"‚ùå {error}",
                        'parse_mode': 'Markdown'
                    })
                
                # ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ID ‡¶è‡¶ï‡ßç‡¶∏‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü
                video_id = None
                patterns = [
                    r'(?:youtube\.com/watch\?v=|youtu\.be/|youtube\.com/embed/)([a-zA-Z0-9_-]{11})',
                ]
                
                for pattern in patterns:
                    match = re.search(pattern, message_text)
                    if match:
                        video_id = match.group(1)
                        break
                
                if not video_id:
                    return jsonify({
                        'method': 'sendMessage',
                        'chat_id': chat_id,
                        'text': "‚ùå ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ID ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§",
                        'parse_mode': 'Markdown'
                    })
                
                # ‡¶á‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶ü‡¶® ‡¶§‡ßà‡¶∞‡¶ø
                buttons = []
                row = []
                
                quality_info = {
                    'default': {'name': '‡¶õ‡ßã‡¶ü', 'emoji': 'üü¢'},
                    'medium': {'name': '‡¶Æ‡¶ß‡ßç‡¶Ø‡¶Æ', 'emoji': 'üü°'},
                    'high': {'name': '‡¶¨‡¶°‡¶º', 'emoji': 'üü†'},
                    'standard': {'name': '‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶æ‡¶∞‡ßç‡¶°', 'emoji': 'üîµ'},
                    'maxres': {'name': '‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö', 'emoji': 'üî¥'}
                }
                
                for i, quality in enumerate(['default', 'medium', 'high', 'standard', 'maxres']):
                    if quality in thumbnails:
                        quality_data = quality_info[quality]
                        row.append({
                            'text': f"{quality_data['emoji']} {quality_data['name']}",
                            'callback_data': f"{quality}|{video_id}"
                        })
                        
                        # ‡¶™‡ßç‡¶∞‡¶§‡¶ø row ‡¶è 2‡¶ü‡¶ø ‡¶¨‡¶æ‡¶ü‡¶®
                        if len(row) == 2 or i == len(['default', 'medium', 'high', 'standard', 'maxres']) - 1:
                            buttons.append(row)
                            row = []
                
                reply_markup = {'inline_keyboard': buttons}
                
                response_text = f"""
‚úÖ **‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá!**

üìπ **‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶≤‡¶ø‡¶Ç‡¶ï:**
`{message_text}`

üéØ **‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø:**
‚Ä¢ üü¢ ‡¶õ‡ßã‡¶ü (120√ó90) - ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü
‚Ä¢ üü° ‡¶Æ‡¶ß‡ßç‡¶Ø‡¶Æ (320√ó180) - ‡¶Æ‡¶ß‡ßç‡¶Ø‡¶Æ ‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø  
‚Ä¢ üü† ‡¶¨‡¶°‡¶º (480√ó360) - ‡¶π‡¶æ‡¶á ‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø
‚Ä¢ üîµ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶æ‡¶∞‡ßç‡¶° (640√ó480) - SD ‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø
‚Ä¢ üî¥ ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö (1280√ó720) - HD ‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø

üëá **‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶õ‡¶®‡ßç‡¶¶‡ßá‡¶∞ ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®:**
                """
                
                # ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø‡¶∞ ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶™‡ßç‡¶∞‡¶ø‡¶≠‡¶ø‡¶â ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶∏‡ßá‡¶®‡ßç‡¶°
                preview_thumb = thumbnails.get('maxres', 
                              thumbnails.get('standard', 
                              thumbnails.get('high', 
                              list(thumbnails.values())[0])))
                
                return jsonify({
                    'method': 'sendPhoto',
                    'chat_id': chat_id,
                    'photo': preview_thumb,
                    'caption': response_text,
                    'parse_mode': 'Markdown',
                    'reply_markup': reply_markup
                })

            # ‡¶Ø‡¶¶‡¶ø YouTube ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶®‡¶æ ‡¶π‡¶Ø‡¶º
            else:
                return jsonify({
                    'method': 'sendMessage',
                    'chat_id': chat_id,
                    'text': """
‚ùå **‡¶á‡¶®‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶° ‡¶≤‡¶ø‡¶Ç‡¶ï**

‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡ßà‡¶ß YouTube ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶∏‡ßá‡¶®‡ßç‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®‡•§

üîó **‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü‡ßá‡¶° ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü:**
‚Ä¢ `https://youtube.com/watch?v=VIDEO_ID`
‚Ä¢ `https://youtu.be/VIDEO_ID`
‚Ä¢ `https://www.youtube.com/embed/VIDEO_ID`

üìã **‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:**
`https://youtu.be/dQw4w9WgXcQ`
`https://www.youtube.com/watch?v=dQw4w9WgXcQ`

üí° **‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø** /help ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
                    """,
                    'parse_mode': 'Markdown',
                    'disable_web_page_preview': True
                })
    
    except Exception as e:
        logger.error(f'Global error: {e}')
        return jsonify({
            'error': 'Processing failed',
            'details': str(e)
        }), 500

# ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶® ‡¶è‡¶®‡ßç‡¶°‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡ßá ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶Ü‡¶∏‡¶≤‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ token ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶¨‡ßá
@app.route('/<path:path>', methods=['GET', 'POST'])
def catch_all(path):
    token = request.args.get('token')
    if not token:
        return jsonify({'error': 'Token required'}), 400
    
    if request.method == 'GET':
        return jsonify({
            'status': 'Bot is running',
            'token_received': True,
            'endpoint': path
        })
    
    # POST request ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Æ‡ßÇ‡¶≤ ‡¶≤‡¶ú‡¶ø‡¶ï‡ßá redirect
    return handle_request()

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port, debug=False)
