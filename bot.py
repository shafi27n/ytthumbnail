import os
import requests
import telebot
from pytube import YouTube
from urllib.parse import urlparse, parse_qs
from flask import Flask, request, jsonify
import logging

# ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶ü‡ßã‡¶ï‡ßá‡¶® - ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶ï‡ßã‡¶°‡ßá
DEFAULT_TOKEN = "7628222622:AAEomk7Od-jcKnQMdkmOpejvYYF47BjMAMQ"

# ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® - URL parameter ‡¶•‡ßá‡¶ï‡ßá ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞
def get_bot_token():
    # Flask request ‡¶•‡ßá‡¶ï‡ßá URL parameter ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
    token_from_url = request.args.get('token') if request else None
    if token_from_url:
        logger.info("‚úÖ Token loaded from URL parameter")
        return token_from_url
    
    # ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
    logger.info("‚úÖ Using default token")
    return DEFAULT_TOKEN

# ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤ ‡¶¨‡¶ü ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü
bot = None

# ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶Ü‡¶á‡¶°‡¶ø ‡¶è‡¶ï‡ßç‡¶∏‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def extract_video_id(url):
    parsed_url = urlparse(url)
    if parsed_url.hostname == 'youtu.be':
        return parsed_url.path[1:]
    if parsed_url.hostname in ('www.youtube.com', 'youtube.com'):
        if parsed_url.path == '/watch':
            return parse_qs(parsed_url.query)['v'][0]
        if parsed_url.path[:7] == '/embed/':
            return parsed_url.path.split('/')[2]
        if parsed_url.path[:3] == '/v/':
            return parsed_url.path.split('/')[2]
    return None

# ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def download_thumbnail(video_id):
    try:
        # ‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶∞‡ßá‡¶ú‡ßã‡¶≤‡¶ø‡¶â‡¶∂‡¶®‡ßá‡¶∞ ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ URL
        thumbnails = {
            'maxres': f'https://img.youtube.com/vi/{video_id}/maxresdefault.jpg',
            'sd': f'https://img.youtube.com/vi/{video_id}/sddefault.jpg',
            'hq': f'https://img.youtube.com/vi/{video_id}/hqdefault.jpg',
            'mq': f'https://img.youtube.com/vi/{video_id}/mqdefault.jpg',
            'default': f'https://img.youtube.com/vi/{video_id}/default.jpg'
        }
        
        # ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø‡¶∞ ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
        for quality, url in thumbnails.items():
            response = requests.get(url, timeout=10)
            if response.status_code == 200 and len(response.content) > 1000:
                filename = f"{video_id}_{quality}.jpg"
                with open(filename, 'wb') as f:
                    f.write(response.content)
                return filename
        return None
    except Exception as e:
        logger.error(f"Error downloading thumbnail: {e}")
        return None

# ‡¶¨‡¶ü ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def initialize_bot(token):
    global bot
    try:
        bot = telebot.TeleBot(token)
        logger.info("‚úÖ Bot initialized successfully")
        return True
    except Exception as e:
        logger.error(f"‚ùå Bot initialization failed: {e}")
        return False

# ‡¶¨‡¶ü ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
def setup_bot_handlers():
    @bot.message_handler(commands=['start'])
    def send_welcome(message):
        welcome_text = """
üéâ **‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°‡¶æ‡¶∞ ‡¶¨‡¶ü‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ!** üéâ

‡¶è‡¶ï‡¶ü‡¶ø ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶æ‡¶†‡¶æ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶Æ‡¶ø ‡¶§‡¶æ‡¶∞ ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá ‡¶¶‡¶ø‡¶¨‡•§

üìå **‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ:**
1. ‡¶è‡¶ï‡¶ü‡¶ø ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
2. ‡¶≤‡¶ø‡¶Ç‡¶ï‡¶ü‡¶ø ‡¶è‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®
3. ‡¶Ü‡¶Æ‡¶ø ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶¨

‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: `https://www.youtube.com/watch?v=dQw4w9WgXcQ`
        """
        bot.reply_to(message, welcome_text)

    @bot.message_handler(commands=['help'])
    def send_help(message):
        help_text = """
ü§ñ **‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°‡¶æ‡¶∞ ‡¶¨‡¶ü - ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø**

üìã **‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶∏‡¶Æ‡ßÇ‡¶π:**
/start - ‡¶¨‡¶ü ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®
/help - ‡¶è‡¶á ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®

üîó **‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü:**
- https://www.youtube.com/watch?v=VIDEO_ID
- https://youtu.be/VIDEO_ID
- https://www.youtube.com/embed/VIDEO_ID
        """
        bot.reply_to(message, help_text)

    @bot.message_handler(commands=['status'])
    def send_status(message):
        status_text = """
ü§ñ **‡¶¨‡¶ü ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏**
‚úÖ ‡¶¨‡¶ü ‡¶è‡¶ï‡ßç‡¶ü‡¶ø‡¶≠ ‡¶è‡¶¨‡¶Ç ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶õ‡ßá
üñºÔ∏è ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§
        """
        bot.reply_to(message, status_text)

    @bot.message_handler(func=lambda message: True)
    def handle_youtube_link(message):
        text = message.text.strip()
        
        if 'youtube.com' in text or 'youtu.be' in text:
            bot.reply_to(message, "üîç ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
            
            video_id = extract_video_id(text)
            
            if video_id:
                try:
                    yt = YouTube(text)
                    video_title = yt.title
                    
                    bot.reply_to(message, f"üìπ **‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ü‡¶æ‡¶á‡¶ü‡ßá‡¶≤:** {video_title}\n\n‚¨áÔ∏è ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
                    
                    thumbnail_file = download_thumbnail(video_id)
                    
                    if thumbnail_file:
                        with open(thumbnail_file, 'rb') as photo:
                            bot.send_photo(message.chat.id, photo, 
                                         caption=f"üñºÔ∏è **‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£!**\n\nüìπ **‡¶≠‡¶ø‡¶°‡¶ø‡¶ì:** {video_title}\nüîó **‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶Ü‡¶á‡¶°‡¶ø:** `{video_id}`")
                        
                        os.remove(thumbnail_file)
                        logger.info(f"‚úÖ Thumbnail sent for video: {video_id}")
                    else:
                        bot.reply_to(message, "‚ùå ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶ü‡¶ø ‡¶™‡¶æ‡¶¨‡¶≤‡¶ø‡¶ï ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
                        
                except Exception as e:
                    error_msg = f"‚ùå ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {str(e)}"
                    bot.reply_to(message, error_msg)
                    logger.error(f"Video error: {e}")
            else:
                bot.reply_to(message, "‚ùå ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶° ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        else:
            bot.reply_to(message, "‚ùå ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶° ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§")

# Flask Routes
@app.route('/')
def home():
    token = get_bot_token()
    bot_initialized = initialize_bot(token) if token else False
    
    return jsonify({
        "status": "active", 
        "bot": "YouTube Thumbnail Downloader",
        "token_used": "default" if token == DEFAULT_TOKEN else "from_url",
        "bot_initialized": bot_initialized,
        "endpoints": {
            "webhook": "/webhook",
            "health": "/health",
            "start_bot": "/start-bot"
        }
    })

@app.route('/health')
def health():
    return jsonify({"status": "healthy", "bot_running": bot is not None})

@app.route('/start-bot')
def start_bot():
    token = get_bot_token()
    if initialize_bot(token):
        setup_bot_handlers()
        
        # ‡¶¨‡¶ü ‡¶™‡ßã‡¶≤‡¶ø‡¶Ç ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶® (background ‡¶è)
        import threading
        def start_polling():
            try:
                logger.info("üîÑ Starting bot polling...")
                bot.infinity_polling()
            except Exception as e:
                logger.error(f"Bot polling error: {e}")
        
        bot_thread = threading.Thread(target=start_polling)
        bot_thread.daemon = True
        bot_thread.start()
        
        return jsonify({
            "status": "success", 
            "message": "Bot started successfully",
            "token_source": "default" if token == DEFAULT_TOKEN else "url_parameter"
        })
    else:
        return jsonify({
            "status": "error", 
            "message": "Failed to initialize bot"
        }), 500

@app.route('/webhook', methods=['POST'])
def webhook():
    if request.method == 'POST':
        try:
            json_string = request.get_data().decode('utf-8')
            update = telebot.types.Update.de_json(json_string)
            
            # ‡¶¨‡¶ü ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡¶æ ‡¶®‡ßá‡¶áÂ∞±ÂÖà ‡¶ï‡¶∞‡ßÅ‡¶®
            token = get_bot_token()
            if not bot:
                initialize_bot(token)
                setup_bot_handlers()
            
            bot.process_new_updates([update])
            return 'OK', 200
        except Exception as e:
            logger.error(f"Webhook error: {e}")
            return 'ERROR', 500

# ‡¶Æ‡ßá‡¶á‡¶® ‡¶è‡¶®‡ßç‡¶ü‡ßç‡¶∞‡¶ø ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü
if __name__ == "__main__":
    port = int(os.environ.get('PORT', 5000))
    logger.info(f"üöÄ Starting YouTube Thumbnail Bot on port {port}")
    
    # ‡¶Ö‡¶ü‡ßã‡¶Æ‡ßá‡¶ü‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶ü ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®
    token = DEFAULT_TOKEN  # ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞
    if initialize_bot(token):
        setup_bot_handlers()
        
        # ‡¶¨‡¶ü ‡¶™‡ßã‡¶≤‡¶ø‡¶Ç ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®
        import threading
        def start_polling():
            try:
                logger.info("üîÑ Starting bot polling...")
                bot.infinity_polling()
            except Exception as e:
                logger.error(f"Bot polling error: {e}")
        
        bot_thread = threading.Thread(target=start_polling)
        bot_thread.daemon = True
        bot_thread.start()
    
    # Flask app ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®
    app.run(host='0.0.0.0', port=port, debug=False)
