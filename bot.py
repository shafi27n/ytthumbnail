from flask import Flask, request, jsonify
import requests
import re
import os
import logging
from urllib.parse import urlparse, parse_qs

# ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶®
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

def extract_youtube_thumbnail(video_url):
    """
    YouTube ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì URL ‡¶•‡ßá‡¶ï‡ßá ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá
    """
    try:
        # ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ID ‡¶è‡¶ï‡ßç‡¶∏‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü
        video_id = None
        
        # ‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶® YouTube URL ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡¶æ
        patterns = [
            r'(?:youtube\.com\/watch\?v=||youtu\.be\/||youtube\.com\/embed\/)([^&=\n?\s]+)',
            r'youtube\.com\/watch\?.*v=([^&=\n?\s]+)',
            r'youtu\.be\/([^&=\n?\s]+)'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, video_url)
            if match:
                video_id = match.group(1)
                break
        
        if not video_id:
            return None, "‡¶≠‡¶æ‡¶≤‡¶ø‡¶° YouTube ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
        
        # ‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø‡¶∞ ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ URLs
        thumbnails = {
            'default': f'https://img.youtube.com/vi/{video_id}/default.jpg',
            'medium': f'https://img.youtube.com/vi/{video_id}/mqdefault.jpg',
            'high': f'https://img.youtube.com/vi/{video_id}/hqdefault.jpg',
            'standard': f'https://img.youtube.com/vi/{video_id}/sddefault.jpg',
            'maxres': f'https://img.youtube.com/vi/{video_id}/maxresdefault.jpg'
        }
        
        return thumbnails, None
        
    except Exception as e:
        logger.error(f"Thumbnail extraction error: {e}")
        return None, f"‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {str(e)}"

@app.route('/', methods=['GET', 'POST'])
def handle_request():
    try:
        # URL ‡¶•‡ßá‡¶ï‡ßá ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶®‡ßá‡¶ì‡ßü‡¶æ
        token = request.args.get('token')
        
        if not token:
            return jsonify({
                'error': '‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®',
                'solution': 'URL ‡¶è ?token=YOUR_BOT_TOKEN ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®'
            }), 400
        
        # GET request ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤
        if request.method == 'GET':
            return jsonify({
                'status': '‡¶¨‡¶ü ‡¶è‡¶ï‡¶ü‡¶ø‡¶≠',
                'instruction': 'POST request ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá YouTube ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶∏‡ßá‡¶®‡ßç‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®',
                'usage': '‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶ì‡¶Ø‡¶º‡ßá‡¶¨‡¶π‡ßÅ‡¶ï URL: https://your-domain.com/?token=YOUR_BOT_TOKEN'
            })
        
        # POST request ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤
        if request.method == 'POST':
            update = request.get_json()
            
            if not update:
                return jsonify({'error': 'Invalid JSON data'}), 400
            
            # ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶°‡ßá‡¶ü‡¶æ ‡¶è‡¶ï‡ßç‡¶∏‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü
            chat_id = None
            message_text = ''
            message_id = None
            
            if 'message' in update:
                chat_id = update['message']['chat']['id']
                message_text = update['message'].get('text', '')
                message_id = update['message'].get('message_id')
            elif 'channel_post' in update:
                chat_id = update['channel_post']['chat']['id']
                message_text = update['channel_post'].get('text', '')
                message_id = update['channel_post'].get('message_id')
            elif 'callback_query' in update:
                # Callback query ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ (‡¶Ø‡¶¶‡¶ø ‡¶á‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶ü‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡¶®)
                chat_id = update['callback_query']['message']['chat']['id']
                message_id = update['callback_query']['message']['message_id']
                return jsonify({
                    'method': 'answerCallbackQuery',
                    'callback_query_id': update['callback_query']['id'],
                    'text': 'Processing...'
                })
            
            if not chat_id:
                return jsonify({'error': '‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶Ü‡¶á‡¶°‡¶ø ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø'}), 400
            
            # /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤
            if message_text.startswith('/start'):
                welcome_text = f"""
üåü <b>‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ YouTube Thumbnail Downloader Bot ‡¶è!</b> üåü

<b>‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶¨‡¶ø‡¶ß‡¶ø:</b>
1. ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã YouTube ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶∏‡ßá‡¶®‡ßç‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
2. ‡¶¨‡¶ü ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶¨‡¶ó‡ßÅ‡¶≤‡ßã ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
3. ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶õ‡¶®‡ßç‡¶¶‡¶Æ‡¶§ ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®

<b>‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü‡ßá‡¶° ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü:</b>
‚Ä¢ https://youtube.com/watch?v=VIDEO_ID
‚Ä¢ https://youtu.be/VIDEO_ID
‚Ä¢ https://www.youtube.com/embed/VIDEO_ID

<b>‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶∏:</b>
/start - ‡¶è‡¶á ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
/help - ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶™‡ßá‡¶§‡ßá

<b>‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:</b>
https://youtu.be/dQw4w9WgXcQ
                """
                
                return jsonify({
                    'method': 'sendMessage',
                    'chat_id': chat_id,
                    'text': welcome_text,
                    'parse_mode': 'HTML',
                    'disable_web_page_preview': True
                })
            
            # /help ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤
            elif message_text.startswith('/help'):
                help_text = """
<b>‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø:</b>
‡¶è‡¶á ‡¶¨‡¶ü YouTube ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶•‡ßá‡¶ï‡ßá ‡¶π‡¶æ‡¶á-‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡ßá‡•§

<b>‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá‡¶®:</b>
1. YouTube ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
2. ‡¶¨‡¶ü‡ßá ‡¶™‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
3. ‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø‡¶∞ ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®
4. ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶õ‡¶®‡ßç‡¶¶‡ßá‡¶∞ ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®

<b>‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶≤‡ßá:</b>
‚Ä¢ ‡¶≤‡¶ø‡¶Ç‡¶ï‡¶ü‡¶ø ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
‚Ä¢ ‡¶®‡ßá‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡¶∂‡¶® ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
‚Ä¢ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
                """
                
                return jsonify({
                    'method': 'sendMessage',
                    'chat_id': chat_id,
                    'text': help_text,
                    'parse_mode': 'HTML'
                })
            
            # YouTube ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏
            else:
                # YouTube ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶ö‡ßá‡¶ï
                youtube_patterns = [
                    r'youtube\.com/watch\?v=',
                    r'youtu\.be/',
                    r'youtube\.com/embed/'
                ]
                
                is_youtube_link = any(pattern in message_text for pattern in youtube_patterns)
                
                if is_youtube_link:
                    # ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶è‡¶ï‡ßç‡¶∏‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü
                    thumbnails, error = extract_youtube_thumbnail(message_text)
                    
                    if error:
                        return jsonify({
                            'method': 'sendMessage',
                            'chat_id': chat_id,
                            'text': f"‚ùå {error}",
                            'parse_mode': 'HTML'
                        })
                    
                    # ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶¨‡¶æ‡¶ü‡¶® ‡¶∏‡¶π ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶∏‡ßá‡¶®‡ßç‡¶°
                    buttons = []
                    for quality, thumb_url in thumbnails.items():
                        buttons.append([
                            {
                                'text': f"üì∑ {quality.upper()} ‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø",
                                'url': thumb_url
                            }
                        ])
                    
                    # ‡¶∏‡¶¨‡¶ó‡ßÅ‡¶≤‡ßã ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡¶æ‡¶ü‡¶®
                    reply_markup = {'inline_keyboard': buttons}
                    
                    response_text = f"""
<b>‚úÖ ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá!</b>

<b>‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶≤‡¶ø‡¶Ç‡¶ï:</b> {message_text}

<b>‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶ó‡ßÅ‡¶≤‡ßã:</b>
‚Ä¢ <b>Default</b> - ‡¶õ‡ßã‡¶ü ‡¶∏‡¶æ‡¶á‡¶ú (120√ó90)
‚Ä¢ <b>Medium</b> - ‡¶Æ‡¶ß‡ßç‡¶Ø‡¶Æ ‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø (320√ó180)  
‚Ä¢ <b>High</b> - ‡¶â‡¶ö‡ßç‡¶ö ‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø (480√ó360)
‚Ä¢ <b>Standard</b> - ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶æ‡¶∞‡ßç‡¶° ‡¶°‡ßá‡¶´‡¶ø‡¶®‡¶ø‡¶∂‡¶® (640√ó480)
‚Ä¢ <b>Max Resolution</b> - ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶∞‡ßá‡¶ú‡ßã‡¶≤‡¶ø‡¶â‡¶∂‡¶® (1280√ó720)

<b>‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶õ‡¶®‡ßç‡¶¶‡ßá‡¶∞ ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®:</b>
                    """
                    
                    # ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶™‡ßç‡¶∞‡¶ø‡¶≠‡¶ø‡¶â ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶∏‡ßá‡¶®‡ßç‡¶°
                    preview_thumb = thumbnails.get('high', thumbnails['default'])
                    
                    return jsonify({
                        'method': 'sendPhoto',
                        'chat_id': chat_id,
                        'photo': preview_thumb,
                        'caption': response_text,
                        'parse_mode': 'HTML',
                        'reply_markup': reply_markup
                    })
                
                else:
                    # ‡¶Ø‡¶¶‡¶ø YouTube ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶®‡¶æ ‡¶π‡¶Ø‡¶º
                    return jsonify({
                        'method': 'sendMessage',
                        'chat_id': chat_id,
                        'text': """
<b>‚ùå ‡¶á‡¶®‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶° ‡¶≤‡¶ø‡¶Ç‡¶ï</b>

‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡ßà‡¶ß YouTube ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶∏‡ßá‡¶®‡ßç‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®‡•§

<b>‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü‡ßá‡¶° ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü:</b>
‚Ä¢ https://youtube.com/watch?v=VIDEO_ID
‚Ä¢ https://youtu.be/VIDEO_ID
‚Ä¢ https://www.youtube.com/embed/VIDEO_ID

<b>‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:</b>
<code>https://youtu.be/dQw4w9WgXcQ</code>
                        """,
                        'parse_mode': 'HTML'
                    })
    
    except Exception as e:
        logger.error(f'Global error: {e}')
        return jsonify({
            'error': '‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•',
            'details': str(e)
        }), 500

@app.route('/health', methods=['GET'])
def health_check():
    """Health check endpoint for monitoring"""
    return jsonify({'status': 'healthy', 'service': 'YouTube Thumbnail Bot'})

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    # Production server ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
    app.run(host='0.0.0.0', port=port)
